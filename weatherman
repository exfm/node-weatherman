#!/usr/bin/env node

"use strict";

var sequence = require('sequence'),
	when = require('when'),
	fs = require('fs'),
	os = require('os'),
	nconf = require('nconf'),
	getConfig = require('junto'),
	aws = require('plata');

var plugins = {
		'system': require('./plugins/system'),
		'rabbit': require('./plugins/rabbit'),
		'listening': require('./plugins/listening')
	},
	config;

getConfig('development').then(function(c){
	config = c;
	aws.connect(config.aws);
});

nconf.file({'file': 'config.json'});
var defaultNamespace = nconf.get('default_namespace');

generateMetrics();
setInterval(function(){
	generateMetrics();
}, nconf.get('interval')*1000);

function generateMetrics(){
	var allMetrics = {},
		timestamp = new Date().toISOString(),
		pluginOpts;

	when.all(nconf.get('active_plugins').map(function(plugin){
		var p = when.defer();
		pluginOpts = nconf.get('plugin_opts')[plugin];
		plugins[plugin].addMetrics(timestamp, pluginOpts).then(function(data){
			if (pluginOpts !== undefined && pluginOpts.namespace !== undefined && pluginOpts.namespace !== defaultNamespace) {
				allMetrics[pluginOpts.namespace] = data;
				return p.resolve();
			}
			else {
				allMetrics[defaultNamespace] = data;
				return p.resolve();
			}
		});
		return p.promise;
	})).then(function(){
		sendMetricsToCloudWatch(allMetrics).then(function(resp){
			console.log('done');
		});
	});
}

function sendMetricsToCloudWatch(metrics){
	var d = when.defer();
	sequence().then(function(next){
		aws.onConnected(next);
	}).then(function(next){
		when.all(Object.keys(metrics).map(function(namespace){
			var p = when.defer();
			aws.cloudWatch.putMetricData(namespace, metrics[namespace]).then(function(){
				return p.resolve();
			});
			p.resolve();
			return p.promise;
		})).then(function(){
			next();
		});
	}).then(function(next){
		d.resolve();
	});
	return d.promise;
}